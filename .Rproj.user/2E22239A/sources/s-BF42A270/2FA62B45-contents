---
documentclass: book
classoption: a4paper
#lang: es
#bibliography: bib/library.bib
bibliography: ["bib/library.bib", "bib/paquetes.bib"]
csl: apa.csl
urlcolor: blue #black
linkcolor: blue #black
link-citations: yes
fontsize: 12pt # 10pt,11pt
geometry: margin = 2.5cm #1.2in
output: 
  pdf_document: 
    keep_tex: no
    number_sections: yes
#    toc: yes
    fig_caption: yes
    includes:
      in_header: latex/latex_preambulo.tex
      after_body: latex/latex_antes_enddoc.tex
---


```{r include=FALSE}
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE    ,fig.path = 'figurasR/',
                      echo = TRUE, warning = FALSE, message = FALSE,
                      fig.pos="H",fig.align="center",out.width="95%",
                      cache=FALSE)

```


<!-- \appendix -->
<!-- \setcounter{chapter}{0} -->
<!-- \setcounter{chapter}{0} escribir 0 para apéndice A  -->

<!-- \pagenumbering{arabic} -->

\fancyhead[LE,RO]{\scriptsize\rightmark}
\fancyfoot[LO,RE]{\scriptsize\slshape \leftmark}
\fancyfoot[C]{}
\fancyfoot[LE,RO]{\footnotesize\thepage}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}


# Apéndice: Línea de tiempo de la cultura institucional

A continuación se presentan los pasos para la derivación de la línea de tiempo de la institucionalidad cultural presentada en el Capítulo 1. El procedimiento descrito corresponde al post elaborado por Keen [-@Keen2018].

## Librerías

Se suben las librerías

```{r librerias}
library(ggplot2)
library(scales)
library(lubridate) # Opera con fechas y sus formatos
library(ggrepel) #Evita la superposición de textos en los gráficos
library(formatR) # Arregla los códigos r muy largos
```

## Datos

Los datos se obtienen principalmente de la memoria del MPPC [@MemoriaMPPC2014] y otros de las páginas web de las instituciones y para los casos de teatros de Wikipedia . Para determinar las fechas de fundación, se prioriza la primera vez que se creó o inauguró el ente, independientemente de la naturaleza jurídica del mismo o de los cambios en su denominación. En los demás casos se toma la fecha de la Gaceta Oficial que los creó. Algunas instituciones solo reportan el año de creación por lo que se fijó arbitrariamente el mes de junio como mes de creación para que aparezcan en la mitad del año en que fueron fundadas o inauguradas.

```{r datos, echo=TRUE}
df <- read.csv('hitos.csv', header= TRUE, sep= ";")
df
```


## Preparación 

Lo primero es definir una fecha para cada una de estas filas como el día 1 del mes.



```{r DefineFecha}
df$date <- with(df, ymd(sprintf('%04d%02d%02d', year, month, 1)))
df <- df[with(df, order(date)), ]
head(df)
```
A continuación se convierte el estado (status) en una variable categórica ordinal, en orden de criticidad que va de "Existente a "Cerrada". También se definen algunos valores de color hexadecimales para asociarlos a estos estados.

```{r estatus}
status_levels <- c("Existente", "Renovada", "Nueva Etapa", "Cerrada")
status_colors <- c("#0070C0", "#00B050", "#FFC000", "#C00000")

df$status <- factor(df$status, levels=status_levels, ordered=TRUE)
```

En la línea de tiempo, se quiere variar la altura y la dirección de las líneas, porque de lo contrario el texto de los hitos chocará. Se necesita asignar las líneas y las alturas para que los hitos del mismo mes sean los mismos, por lo que sólo se cambian los valores de altura y posición.

A continuación, se ordena los datos por fecha y estado, de modo que el estado "cerrado"" se traza en último lugar y los colores que se muestran son para el estado de los hitos cerrados.

```{r orden}
positions <- c(0.5, -0.5, 1.0, -1.0, 1.5, -1.5)
directions <- c(1, -1)

line_pos <- data.frame(
    "date"=unique(df$date),
    "position"=rep(positions, length.out=length(unique(df$date))),
    "direction"=rep(directions, length.out=length(unique(df$date)))
)

df <- merge(x=df, y=line_pos, by="date", all = TRUE)
df <- df[with(df, order(date, status)), ]

head(df)
```

Si hay múltiples hitos para un mes determinado, se necesita alterar ligeramente sus posiciones (ligeramente más alto si está por encima de la línea de tiempo y ligeramente más bajo si está por debajo).

Se puede hacer un recuento acumulativo de fechas individuales para comprobar si se tienen múltiples hitos para un mes determinado.


```{r reposicion}
text_offset <- 0.05

df$month_count <- ave(df$date==df$date, df$date, FUN=cumsum)
df$text_position <- (df$month_count * text_offset * df$direction) + df$position
head(df)
```
Como se quiere mostrar todos los meses en las líneas de tiempo, no sólo los meses para los que hay eventos, se crea un dataframe que contenga todos los meses.

Se empieza 2 meses antes del primer hito y se termina 2 meses después del último hito para tener un poco de memoria intermedia.

```{r MemoriaIntermedia, tidy=TRUE, tidy.opts=list(width.cutoff=60)}
month_buffer <- 2

month_date_range <- seq(min(df$date) - months(month_buffer), max(df$date) + months(month_buffer), by='month')
month_format <- format(month_date_range, '%b')
month_df <- data.frame(month_date_range, month_format)
```

Se hace lo mismo para los años que también se quieren mostrar.

Sólo se mostrarán los años para los que hay un cruce de diciembre/enero, esto es lo que está haciendo la línea de intersección (intersect).

```{r interseccion}
year_date_range <- seq(min(df$date) - months(month_buffer), max(df$date) + months(month_buffer), by='year')
year_date_range <- as.Date(
    intersect(
        ceiling_date(year_date_range, unit="year"),
        floor_date(year_date_range, unit="year")
    ),  origin = "1970-01-01"
)
year_format <- format(year_date_range, '%Y')
year_df <- data.frame(year_date_range, year_format)
```


## Generación del gráfico de línea de tiempo

Ahora que se tienen los datos en un estado listo para ser trazados, se puede armar el gráfico, del cual debido a que los meses y años aparecen muy juntos, se optó por desaplicarlos. Igualmente se usó el paquete la función *geom_text_repel* del paquete *ggrepel* para evitar la superposición del texto de los hitos. Finalmente el gráfico se guarda como una imagen png para ser insertada en el Capítulo 1:

```{r lineaTiempo}
png(filename = "hitos.png", width = 800, height = 600)
timeline_plot<-ggplot(df,aes(x=date,y=0, col=status, label=milestone))
timeline_plot<-timeline_plot+labs(col="Hitos")
timeline_plot<-timeline_plot+scale_color_manual(values=status_colors, labels=status_levels, drop = FALSE)
timeline_plot<-timeline_plot+theme_minimal()

# Trazar una línea negra horizontal para la línea de tiempo
timeline_plot<-timeline_plot+geom_hline(yintercept=0, 
                color = "black", size=0.3)

# Trazar líneas de segmentos verticales para hitos
timeline_plot<-timeline_plot+geom_segment(data=df[df$month_count == 1,], aes(y=position,yend=0,xend=date), color='black', size=0.2)

# Trazar los puntos de dispersión en cero y la fecha
# timeline_plot<-timeline_plot+geom_point(aes(y=0), #size=3)

# No muestra los ejes, posiciona apropiadamente la leyenda
timeline_plot<-timeline_plot+theme(axis.line.y=element_blank(),
                 axis.text.y=element_blank(),
                 axis.title.x=element_blank(),
                 axis.title.y=element_blank(),
                 axis.ticks.y=element_blank(),
                 axis.text.x=element_blank(),
                 axis.ticks.x =element_blank(),
                 axis.line.x =element_blank(),
                 legend.position = "bottom"
                )

# Mostrar el texto de cada mes
#timeline_plot<-timeline_plot+geom_text(data=month_df, #aes(x=month_date_range,y=-0.1,label=month_format),size#=2.5,vjust=0.5, color='black', angle=90)
# Mostrar el texto del año
#timeline_plot<-timeline_plot+geom_text(data=year_df, #aes(x=year_date_range,y=-0.15,label=year_format, #fontface="bold"),size=1.5, #color='black',vjust=0.5, #angle=90)
#Mostrar el texto de cada hito
timeline_plot<-timeline_plot+geom_text_repel(aes(y=text_position,label=milestone),size=4.0)
print(timeline_plot)
dev.off()
print(timeline_plot)
```




